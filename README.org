* Project 5 Stacks and Queues

* Due: Tuesday May 2, 7:00am

* Folder and files

- This project requires:
  - A Makefile
  - Doctest based tests
  - At least three targets in the Makefile
    1. main (program executable)
    2. tests (doctest tests executable)
    3. clean (remove the .o files) 

* Important notes
1. As indiciated above, you should test your project using doctest
2. Make sure to use exceptions as we discussed in class to handle error conditions.


* Part 1 - Stacks

Create a linked list based stack class. You can call the class
whatever you'd like. Feel free to use code that you developed for
earlier projects (Node, etc.). *IMPORTANT NOTE:* Your stack class has to implement the list, you can reuse code but 
you can't just have an instance variable with a list as a member you must create and manipulate the linked list in your stack class.


You mist implement the following functionality:
1. Constructor/destructors
2. push(int) (you can change the type to std::string if you'd like)
3. int pop() // remove and return the top item
4. int top() // return but do not remove the top item
5. bool is_empty() // return true if empty, false otherwise

You must also use exception handling (try/catch) to handle error
situations like stack empty and full (although you really can't test
full easily so just implement it but don't worry about testing).


* Part 2 - Queues

Create an array (or std::vector) based queue class. You can call the class whatever you like. 
It should start the array (or std::vector) at some small size and have integer index variables to represent the front and back (head / tail). When you get to the end of the array, you should cycle back to the beginning and when the head wraps around and catches up with the tail, the queue should be considered full. Likewise if the tail catches up with the head the qwueue is empty. Note that the tail also wraps around and taht the queue starts out empty.


Your class must implement the following functionality:
1. Constructor(s)
2. enqueue(int) (you can change to std::string if you wish) // add an item to the back of the queue
3. int sequeue() // remove and return the item from the front of the queue
4. int front() // return but do not remove the item from the front of the queue
5. bool is_empty()
6. bool is_full().

You should not grow the array or std::vector once you create it, just let the queue fill up.

